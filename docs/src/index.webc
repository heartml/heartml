---
layout: "default.webc"
---

<h1 style="text-align:center">
  <span style="color:#FF4551">H</span>ear<span style="color:#FF4551">tml</span>:
  Postmodern HTML. üç≠<br/>Web components with the hots for declarative markup. üòª
</h1>

<template webc:type="11ty" 11ty:type="md">

<abbr title="Hyper Expressive and Reactive Templated Modules Library">Heartml</abbr> is the web‚Äôs most **versatile** new component format, centered around present-day **open standards** and running in the direction of future ones.

You can define Heartml components entirely in JavaScript, in declarative Single-File Component **HTML module** files, or simply embedded directly in any HTML page. Build steps completely optional!

Write **split components** (all markup is rendered server-side, then upgraded with client-side behavior), **hybrid components** (markup from server, but shipping with a template so new components can be initialized on the client), or **client-side only** components‚Äîyou decide!

Forget everything you know about web components and fall in love all over again.

**‚ô•Ô∏é**{style="color:#FF4551"} **Callee** can't wait to explain how everything works! <img src="/images/Callee - cutout.png" alt="Callee" style="width:100px; margin-inline-start: 0.5em; vertical-align: -1em" /> {style="text-align:right"}

## Features! So Many Features!

### Every Component Everywhere All at Once

* Server-agnostic: Ruby today, JavaScript coming soon, other renderers entirely possible!
* But you can even integrate with other server renderers like WebC!
* Use Heartml all by itself or alongside other web components built with vanilla JS, Lit, Stencil, etc.
* Heartml works everywhere! Use Heartml in all kinds of stacks, from WordPress to Ruby on Rails to Eleventy.

### Choose Your Flavor

* Most features work in light DOM _and_ in shadow DOM, sometimes simultaneously!
* Declarative Shadow DOM-aware and Turbo-compatible.
* Signals (a minimalist [bundled dependency](https://github.com/preactjs/signals)) provides for fine-grained reactivity and coordinated client state across components.
* Heartml modules can be loaded directly in buildless environments or bundled via esbuild.

### Extensible by Design

* 98% of functionality is located in plugins, rather than the base class (and you can write your own base class if you really want to!).
* Write your own plugins! They're ‚Äúcomposable‚Äù behaviors components can opt-into via both JavaScript and declarative HTML.
* Package provides unbundled ESM, or install pre-bundled/minified CDN-friendly version.
* Tiny ~5KB compressed size‚Äîeven when including Signals. _Did we mention this thing is tiny?_ üòÜ

**‚ô•Ô∏é**{style="color:#FF4551"} **Callee** has a few demos she'd like to show you! <img src="/images/Callee - cutout.png" alt="Callee" style="width:100px; margin-inline-start: 0.5em; vertical-align: -1em" /> {style="text-align:right"}

## How to Install

From a CDN:

```html
<head>
  <script src="https://cdn.jsdelivr.net/npm/heartml@0.13.0"></script>
</head>
```

From a package:

```shell
npm i heartml
```

```js
import { HeartElement } from "heartml"
```

## Heartml in Action

**‚ô•Ô∏é**{style="color:#FF4551"} Wee! Let's try out some custom elements! <img src="/images/Callee - cutout.png" alt="Callee" style="width:100px; margin-inline-start: 0.5em; vertical-align: -1em" /> {style="text-align:center"}

</template>

<playground-ide>
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <my-component count="10">
    <button host-event="click#decrement">Dec -</button>
    Counter:
    <span host-effect="@textContent = .count">0</span>
    <button host-event="click#increment">Inc +</button>
  </my-component>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"

class MyComponent extends HeartElement {
  static properties = {
    count: {}
  }

  static declarativeEffects = { light: true }

  static declarativeEvents = ["click"]

  static {
    this.define("my-component")
  }

  start() {
    this.count = 1
  }

  increment() {
    this.count++
  }

  decrement() {
    this.count--
  }
}

  </script>
</playground-ide>

<playground-ide>
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <name-change name="Callee the Canine Coder">
    <p host-effect="@textContent = .name">x</p>
    
    <label>Rename:
    <input type="text" host-effect="@value = .name" host-event="input#changeName" style="width:15em" />
    </label>
  </name-change>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"

class MyComponent extends HeartElement {
  static properties = {
    name: {}
  }

  static declarativeEffects = { light: true }

  static declarativeEvents = ["input"]

  static {
    this.define("name-change")
  }

  start() {
    this.name = ""
  }

  changeName(event) {
    this.name = event.target.value
  }
}

  </script>

</playground-ide>


<playground-ide>
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script src="https://cdn.jsdelivr.net/npm/heartml@0.13.0">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <name-change>
    <p host-effect="@textContent = .name">x</p>
    
    <label>Phone number:
    <input type="text" host-effect="@value = .name" host-event="input#changeName" />
    </label>
  </name-change>

  <heart-ml tag="name-change"
    properties='{ "name": {} }'
    declarative-effects='{ "light": true }'
    declarative-events='["input"]'
  >
    <script type="module">
      class NameChange extends HeartElement {
        start() {
          this.name = ""
        }
      
        changeName(event) {
          this.name = event.target.value.replace(/[a-zA-Z]*/g, "")
        }
      }
      NameChange.hoist()
    &lt;/script>
  </heart-ml>
</body>

  </script>

</playground-ide>


<template webc:type="11ty" 11ty:type="md">

### Heartml Module Files (SFCs)

When you're ready to write a Single-File Component that's not simply JavaScript, here comes `.heartml`.

</template>

<playground-ide>
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script src="https://cdn.jsdelivr.net/npm/heartml@0.13.0">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <my-counter count="1"></my-counter>
  <heart-module src="counter.heartml"></heart-module>
</body>

  </script>

  <script webc:keep type="sample/html" filename="counter.heartml">

<script type="module">
  class Counter extends HeartElement {
    static template = import.meta.document
    static properties = { count: {} }
    static declarativeEffects = { shadow: true }
    static declarativeEvents = ["click"]

    start() { this.count = 0 }
    increment(event) { this.count++ }
    decrement(event) { this.count-- }
  }
  Counter.define("my-counter")
&lt;/script>

<template>
  <button host-event="click#decrement">-</button>
  <strong host-effect="@textContent=.count" style="display: inline-block; width: 4rem">0</strong>
  <button host-event="click#increment">+</button>
</template>

<style>
  :host { display: block; text-align: center; font-size: 200%; }
  button { font-size: inherit; }
</style>

  </script>

</playground-ide>

<template webc:type="11ty" 11ty:type="md">

  ### Write a Plugin
  
  Virtually all Heartml functionality is provided by plugins. Every static property on your class is checked to determine if it should activate a plugin. So writing your own is simply a matter of adding some code to the `Hearml.plugins` object, and using that key as a static property on your component class. This doubles as a configuration mechanism, and even works as pure JSON within declarative custom element attributes! (Any `kebob-case` plugin attribute gets converted to `camelCase` automatically.)
  
  </template>

<playground-ide>
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <ready-to-party confetti-colors="#7ef2ae #FF4551">
    <p style="justify-content: center; height: 25vh; display: flex">
      <button host-event="click#party" style="font: inherit">
        Party Time! üéä
      </button>
    </p>
  </ready-to-party>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"
import "./confetti-plugin.js"

class MyComponent extends HeartElement {
  static declarativeEvents = ["click"]

  static confetti = {
    seconds: 2
  }

  static {
    this.define("ready-to-party")
  }

  party() {
    this.releaseConfetti()
  }
}

  </script>

  <script webc:keep type="sample/js" filename="confetti-plugin.js">

import Heartml from "heartml"
import confetti from "canvas-confetti"

Heartml.plugins.confetti = {
  instance(element) {
    element.releaseConfetti = function() {
      const colors = this.getAttribute("confetti-colors")?.split(" ") || this.constructor.confetti.colors || ["#0000FF", "FF0000"]
      const duration = Date.now() + (this.constructor.confetti.seconds * 1000);

      (function frame() {
        confetti({
          particleCount: 2,
          angle: 60,
          spread: 55,
          origin: { x: 0 },
          colors: colors
        });
        confetti({
          particleCount: 2,
          angle: 120,
          spread: 55,
          origin: { x: 1 },
          colors: colors
        });
  
        if (Date.now() < duration) {
          requestAnimationFrame(frame);
        }
      }());
    }
  }
}

  </script>
</playground-ide>

<template webc:type="11ty" 11ty:type="md">

## Works Great with Design Systems‚Ä¶Like Shoelace!

If it's a custom element, you're golden. Mix 'n' match however you like. Just keep an eye on your total bundle size. (But if you employ Islands Architecture and use tools like `<is-land>`‚Ä¶might not even matter!)


**‚ô•Ô∏é**{style="color:#FF4551"} **Callee** is so happy all these different component systems can work together! <img src="/images/Callee - cutout.png" alt="Callee" style="width:100px; margin-inline-start: 0.5em; vertical-align: -1em" /> {style="text-align:center"}

</template>

<playground-ide>
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.8.0/cdn/themes/dark.css" />
  <script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.8.0/cdn/shoelace-autoloader.js">&lt;/script>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body class="sl-theme-dark">
  <name-change name="Callee the Component Critter">
    <p host-effect="@textContent = .name">x</p>

    <p><sl-input label="Rename:" host-effect="@value = .name" host-event="input#changeName"></sl-input></p>

    <p><sl-button variant="success" host-event="click#popUpName">
      <sl-icon slot="prefix" name="question-circle"></sl-icon> What's the Name?
    </sl-button></p>
  </name-change>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"

class MyComponent extends HeartElement {
  static properties = {
    name: {}
  }

  static declarativeEffects = { light: true }

  static declarativeEvents = ["click", "input"]

  static {
    this.define("name-change")
  }

  start() {
    this.name = ""
  }

  changeName(event) {
    this.name = event.target.value
  }

  popUpName() {
    alert(`My name is ${this.name}!`)
  }
}

  </script>

</playground-ide>

<my-component @prop="neeet"></my-component>