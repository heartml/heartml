---
layout: "default.webc"
---

<h1 style="text-align:center">
  <span style="color: var(--color-red)"><u style="text-decoration-style: wavy; text-underline-offset: 0.2em">H</u>ear<u style="text-decoration-style: wavy; text-underline-offset: 0.2em">tml</u></span> is
  Postmodern HTML. üç≠<br/>Web components that just can't get enough of that sweet declarative markup. ü•∞
</h1>

<template webc:type="11ty" 11ty:type="md">

<abbr title="Hyper Expressive and Reactive Templated Modules Library">Heartml</abbr> is a **versatile** new web component format, centered around present-day **open standards** and running in the direction of future ones.

You can define Heartml components entirely in JavaScript, in declarative Single-File Component **HTML module** files, or simply embedded directly in any HTML page. Build steps? _Completely optional!_

Write **split components** (all markup is rendered server-side, then upgraded with client-side behavior), **hybrid components** (markup from server, but shipping with a template so new components can be initialized on the client), or **client-side only** components‚Äî_you decide!_

Forget everything you know about web components‚Ä¶and _fall in love with them_ all over again.

<callee-callout>**Callee** can't wait to explain how everything works!</callee-callout>

## Features! So Many Features!

### Every Component Everywhere All at Once

* **Server-agnostic**: emit SSR via <a href="/ruby">Ruby today</a>, JavaScript coming soon. Other renderers entirely possible.
* Or you can integrate with existing **server component** formats such as [WebC](https://www.11ty.dev/docs/languages/webc/).
* Use Heartml all by itself or **alongside other web components** built with vanilla JS, [Lit](https://lit.dev), [Stencil](https://stenciljs.com), etc.
* **Run Heartml everywhere!** It works seamlessly in all kinds of stacks, from WordPress to Ruby on Rails to Eleventy.

### Choose Your Flavor

* Most features work in light DOM _and_ in shadow DOM, **sometimes simultaneously!**
* Heartml is Declarative Shadow DOM-ready and **compatible with HTML over the wire** tooling such as Turbo.
* Signals (a minimalist [bundled dependency](https://github.com/preactjs/signals)) provides for **fine-grained reactivity** and even coordinated client state across multiple components.
* Heartml **modules** can be loaded directly in buildless environments or bundled up via a straightforward [esbuild plugin](https://github.com/whitefusionhq/esbuild-plugin-html-modules).

### Extensible by Design

* 98% of functionality is located in **plugins**, rather than the base class. (And you can assemble _your own base class_ if you really want to.)
* **Write your own plugins!** They're ‚Äúcomposable‚Äù behaviors which components can opt into via both JavaScript and declarative HTML.
* Package provides unbundled ESM, or install a pre-bundled/minified version right off a **CDN**.
* All of Heartml fits in a **tiny** ~5KB compressed size‚Äîeven including Signals. _Did we mention this thing is tiny?_ üòÜ

<callee-callout>**Callee** has a few demos they'd like to show you!</callee-callout>

## How to Install

From a CDN:

```html
<head>
  <script src="https://cdn.jsdelivr.net/npm/heartml@latest"></script>
</head>
```

From a package:

```shell
npm i heartml
```

```js
import { HeartElement } from "heartml"
```

## Heartml in Action

<callee-callout centered>
  Wee! Let's try out some custom elements!
</callee-callout>

</template>

<playground-ide id="simple-counter">
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <my-component count="10">
    <button host-event="click#decrement">Dec -</button>

    Counter:
    <span host-effect=".count">0</span>

    <button host-event="click#increment">Inc +</button>
  </my-component>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"

class MyComponent extends HeartElement {
  static properties = {
    count: {}
  }

  static declarativeEffects = { light: true }

  static declarativeEvents = ["click"]

  static {
    this.define("my-component")
  }

  start() {
    this.count = 1
  }

  increment() {
    this.count++
  }

  decrement() {
    this.count--
  }
}

  </script>
</playground-ide>
<copy-button from="simple-counter"></copy-button>

<playground-ide id="rename-callee">
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <name-change name="Callee the Canine Coder">
    <p host-effect=".name">x</p>
    
    <label>Rename:
    <input type="text" host-effect="@value = .name" host-event="input#changeName" style="width:15em" />
    </label>
  </name-change>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"

class MyComponent extends HeartElement {
  static properties = {
    name: {}
  }

  static declarativeEffects = { light: true }

  static declarativeEvents = ["input"]

  static {
    this.define("name-change")
  }

  start() {
    this.name = ""
  }

  changeName(event) {
    this.name = event.target.value
  }
}

  </script>

</playground-ide>
<copy-button from="rename-callee"></copy-button>

<template webc:type="11ty" 11ty:type="md">

  ### Declarative Custom Elements (DCEs)

  Heartml lets you define custom elements **declaratively** directly in your HTML using `heart-ml` tags. This is particularly useful for co-locating components with specific use cases right in the contexts where they'll be used.

</template>

<playground-ide id="phone-number-input">
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script src="https://cdn.jsdelivr.net/npm/heartml@latest">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <name-change>
    <p host-effect=".name">x</p>
    
    <label>Phone number:
    <input type="text" host-effect="@value = .name" host-event="input#changeName" />
    </label>
  </name-change>

  <!-- Ooo, declarative! -->
  <heart-ml tag-name="name-change"
    properties='{ "name": {} }'
    declarative-effects='{ "light": true }'
    declarative-events='["input"]'
  >
    <script type="module">
      class NameChange extends (await customElements.whenDefined("heart-ml")) {
        start() {
          this.name = ""
        }
      
        changeName(event) {
          this.name = event.target.value.replace(/[a-zA-Z]*/g, "")
        }
      }
      NameChange.define()
    &lt;/script>
  </heart-ml>
</body>

  </script>

</playground-ide>
<copy-button from="phone-number-input"></copy-button>

<template webc:type="11ty" 11ty:type="md">

### Heartml Module Files (SFCs)

Moving a step up from DCEs, you can author `.heartml` files‚Äîa **Single-File Component** format which starts with pure HTML. You can import and bundle `.heartml` files via [esbuild](https://github.com/whitefusionhq/esbuild-plugin-html-modules) or alternatively use the `<heart-module>` custom element to load them up in any "buildless" environment.

</template>

<playground-ide id="heartml-module">
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script src="https://cdn.jsdelivr.net/npm/heartml@latest">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <my-counter count="1"></my-counter>
  <heart-module src="counter.heartml"></heart-module>
</body>

  </script>

  <script webc:keep type="sample/html" filename="counter.heartml">

<script type="module">
  class Counter extends HeartElement {
    static template = import.meta.document
    static properties = { count: {} }
    static declarativeEffects = { shadow: true }
    static declarativeEvents = ["click"]

    start() { this.count = 0 }
    increment(event) { this.count++ }
    decrement(event) { this.count-- }
  }
  Counter.define("my-counter")
&lt;/script>

<template>
  <button host-event="click#decrement">-</button>
  <strong host-effect=".count" style="display: inline-block; width: 4rem">0</strong>
  <button host-event="click#increment">+</button>
</template>

<style>
  :host { display: block; text-align: center; font-size: 200%; }
  button { font-size: inherit; }
</style>

  </script>

</playground-ide>
<copy-button from="heartml-module"></copy-button>

<template webc:type="11ty" 11ty:type="md">

  ### Write a Plugin
  
  Virtually all Heartml functionality is provided by plugins. Every static property on your class is checked to determine if it should activate a plugin. So writing your own is simply a matter of adding some code to the `Hearml.plugins` object, and using that key as a static property on your component class.
  
  This pattern doubles as a configuration mechanism, and even works as pure JSON within declarative custom element attributes! (Any `kebob-case` plugin attribute gets converted to `camelCase` automatically.)
  
  </template>

<playground-ide id="confetti-plugin">
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body>
  <ready-to-party confetti-colors="#7ef2ae #FF4551">
    <p style="justify-content: center; height: 25vh; display: flex">
      <button host-event="click#party" style="font: inherit">
        Party Time! üéä
      </button>
    </p>
  </ready-to-party>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"
import "./confetti-plugin.js"

class MyComponent extends HeartElement {
  static declarativeEvents = ["click"]

  static confetti = {
    seconds: 2
  }

  static {
    this.define("ready-to-party")
  }

  party() {
    this.releaseConfetti()
  }
}

  </script>

  <script webc:keep type="sample/js" filename="confetti-plugin.js">

import Heartml from "heartml"
import confetti from "canvas-confetti"

Heartml.plugins.confetti = {
  instance(element) {
    element.releaseConfetti = function() {
      const colors = this.getAttribute("confetti-colors")?.split(" ") || this.constructor.confetti.colors || ["#0000FF", "FF0000"]
      const duration = Date.now() + (this.constructor.confetti.seconds * 1000);

      (function frame() {
        confetti({
          particleCount: 2,
          angle: 60,
          spread: 55,
          origin: { x: 0 },
          colors: colors
        });
        confetti({
          particleCount: 2,
          angle: 120,
          spread: 55,
          origin: { x: 1 },
          colors: colors
        });
  
        if (Date.now() < duration) {
          requestAnimationFrame(frame);
        }
      }());
    }
  }
}

  </script>
</playground-ide>
<copy-button from="confetti-plugin"></copy-button>

<template webc:type="11ty" 11ty:type="md">

## Works Great with Design Systems‚Ä¶Like Shoelace!

If it's another custom element, **you're golden**. Mix 'n' match however you like. Just keep an eye on your total bundle size. (But if you employ Islands Architecture and use tools like `<is-land>`‚Ä¶might not even matter!)

<callee-callout centered>**Callee** is so happy all these different component systems can work together!</callee-callout>

</template>

<playground-ide id="shoelace-example">
  <script webc:keep type="sample/html" filename="index.html">

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.11.2/cdn/themes/dark.css" />
  <script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.11.2/cdn/shoelace-autoloader.js">&lt;/script>
  <script type="module" src="./component.js">&lt;/script>
  <link rel="stylesheet" href="defaults.css" />
</head>
<body class="sl-theme-dark">
  <name-change name="Callee the Component Critter">
    <p host-effect=".name">x</p>

    <p><sl-input label="Rename:" host-effect="@value = .name" host-event="input#changeName"></sl-input></p>

    <p><sl-button variant="success" host-event="click#popUpName">
      <sl-icon slot="prefix" name="question-circle"></sl-icon> What's the Name?
    </sl-button></p>
  </name-change>
</body>

  </script>

  <script webc:keep type="sample/js" filename="component.js">

import { HeartElement } from "heartml"

class MyComponent extends HeartElement {
  static properties = {
    name: {}
  }

  static declarativeEffects = { light: true }

  static declarativeEvents = ["click", "input"]

  static {
    this.define("name-change")
  }

  start() {
    this.name = ""
  }

  changeName(event) {
    this.name = event.target.value
  }

  popUpName() {
    alert(`My name is ${this.name}!`)
  }
}

  </script>

</playground-ide>
<copy-button from="shoelace-example"></copy-button>

<template webc:type="11ty" 11ty:type="md">

----

## Next Steps

Peruse the [Documentation](/documentation) to learn more about the various features of the Heartml component format, including how to work with signals and effects, how to control hydration through "lazy" effects, how to handle events, how you can manage shared state across multiple components, and how to add shared component behaviors via plugins.

For server-side rendering (SSR), read our [Ruby Components](/ruby) documentation. We hope to support more SSR languages in the future, such as JavaScript.

## Where is Heartml Being Used?

The largest production rollouts of Heartml to date are on the [Preset Galaxy](https://www.presetgalaxy.com) and [The Spicy Web](https://www.spicyweb.dev) websites. You can see Heartml in action on **Preset Galaxy** in the form of the audio player, comments section, and several other interactive elements across various features. On **The Spicy Web**, Heartml handles the account "drawer", paywall access to content, and some other aspects of the content experience.

Now that Heartml is available to the public, we hope to see usage blossom in a variety of settings!

## Who's Developing Heartml?

Heartml is developed by Jared White, the creator of Bridgetown and a freelance web solutions architect with Whitefusion. It was conceived in fall of 2022, and released as a beta to the public in early 2024.

### Competing Solutions

While Heartml is an original solution, it gets its inspiration from a variety of sources. The idea of a single-file component with separate tags for the HTML template, CSS, and JavaScript was popularized by **Vue**, and [petite-vue](https://github.com/vuejs/petite-vue) was a particular point of inspiration. There are hints of features popularized by [Lit](https://lit.dev), a well-known web component library. The proposed **HTML Modules spec** and our subsequent [esbuild plugin](https://github.com/whitefusionhq/esbuild-plugin-html-modules) was also a launching pad for a library like Heartml.

From an HTML-first perspective, other solutions you may have come across are [WebC](https://github.com/11ty/webc) and [Enhance](https://enhance.dev), which both offer ways to server-render web components and related HTML constructs. While Heartml was born independently and evolved in parallel to those projects, you'll notice some definite similiaries (as well as plenty of differences!). We believe "a rising tide floats all boats" and the more examples of using web component-esque solutions in various web frameworks there are around the industry‚Äîand especially in multiple server languages besides just JavaScript‚Äîthe better!

### Contributing to Heartml

...

</template>